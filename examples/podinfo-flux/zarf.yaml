kind: ZarfPackageConfig
metadata:
  name: podinfo-flux
  description: Deploy flux and then podinfo via flux

components:
  - name: flux
    description: Installs the flux CRDs / controllers to use flux-based deployments in the cluster
    required: true
    manifests:
      - name: flux-crds
        namespace: flux
        files:
          - flux-install.yaml
    images:
      - ghcr.io/fluxcd/helm-controller:v0.37.4
      - ghcr.io/fluxcd/image-automation-controller:v0.37.1
      - ghcr.io/fluxcd/image-reflector-controller:v0.31.2
      - ghcr.io/fluxcd/kustomize-controller:v1.2.2
      - ghcr.io/fluxcd/notification-controller:v1.2.4
      - ghcr.io/austinabro321/fluxcd/source-controller:main

  - name: podinfo-via-flux-git
    description: Example deployment via flux (git) using the famous podinfo example
    required: true
    manifests:
      - name: podinfo
        namespace: podinfo-git
        files:
          - git/podinfo-source.yaml
          - git/podinfo-kustomization.yaml
    repos:
      - https://github.com/stefanprodan/podinfo.git
    images:
      - ghcr.io/stefanprodan/podinfo:6.4.0
    actions:
      onDeploy:
        after:
          - description: Podinfo pods to be ready via wait action
            wait:
              cluster:
                kind: pod
                name: app=podinfo
                namespace: podinfo-git
                condition: ready

  - name: podinfo-via-flux-helm
    description: Example deployment via flux (helm oci) using the famous podinfo example
    required: true
    manifests:
      - name: podinfo
        namespace: podinfo-helm
        files:
          - helm/podinfo-source.yaml
          - helm/podinfo-helmrelease.yaml
    images:
      - ghcr.io/stefanprodan/podinfo:6.4.0
      # NOTE: Zarf only supports `oci://` urls within Flux HelmRepository definitions
      - oci://ghcr.io/stefanprodan/charts/podinfo:6.4.0
    actions:
      onDeploy:
        after:
          - description: Podinfo pods to be ready via wait action
            wait:
              cluster:
                kind: pod
                name: app.kubernetes.io/name=podinfo
                namespace: podinfo-helm
                condition: ready

  - name: podinfo-via-flux-oci
    description: Example deployment via flux (native oci) using the famous podinfo example
    required: true
    manifests:
      - name: podinfo
        namespace: podinfo-oci
        files:
          - oci/podinfo-source.yaml
          - oci/podinfo-kustomization.yaml
    images:
      - ghcr.io/stefanprodan/podinfo:6.4.0
      - oci://ghcr.io/stefanprodan/manifests/podinfo:6.4.0
    actions:
      onDeploy:
        after:
          # This will use a wait action to wait for the podinfo pod to be ready
          - description: Podinfo pods to be ready via wait action
            wait:
              cluster:
                kind: pod
                name: app=podinfo
                namespace: podinfo-oci
                condition: ready

# YAML keys starting with `x-` are custom keys that are ignored by the Zarf CLI
# The `x-mdx` key is used to render the markdown content for https://docs.zarf.dev/ref/examples
x-mdx: |
  This example demonstrates how to use Flux with Zarf to deploy the `stefanprodan/podinfo` app using GitRepositories, HelmRepositories, and OCIRepositories.

  It uses a vanilla configuration of Flux with upstream containers.

  If you want to learn more about how Zarf handles `git` repositories, see the [git-data](../git-data/README.md) example. Zarf also supports OCI Helm Charts and OCI Flux manifests when they are included under `images` and pushed to the Zarf-managed registry.

  :::caution

  Only `type: oci` HelmRepositories are supported by the Zarf Agent. The `type` key requires a HelmRepository CRD version greater than v1beta1.

  The Zarf agent will only automatically add the `insecure` key if the internal registry is used. If you are using a http registry outside of the cluster you will need to manually add this key.

  Due to a bug in helm, the URL to an insecure registry must be an IP address instead of a hostname. This is not an issue when using the internal registry as the URL will be mutated to an IP address, however this means helmrepositories are not supported when using an external http registry not pointed to an IP address. See [this PR](https://github.com/helm/helm/pull/12998) for more detail

  :::
