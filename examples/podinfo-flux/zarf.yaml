kind: ZarfPackageConfig
metadata:
  name: podinfo-flux
  description: Deploy flux and then podinfo via flux

components:
  - name: flux
    description: Installs the flux CRDs / controllers to use flux-based deployments in the cluster
    required: true
    manifests:
      - name: flux-crds
        namespace: flux
        files:
          - flux-install.yaml
    images:
      - ghcr.io/fluxcd/helm-controller:v0.37.4
      - ghcr.io/fluxcd/image-automation-controller:v0.37.1
      - ghcr.io/fluxcd/image-reflector-controller:v0.31.2
      - ghcr.io/fluxcd/kustomize-controller:v1.2.2
      - ghcr.io/fluxcd/notification-controller:v1.2.4
      - ghcr.io/austinabro321/fluxcd/source-controller:austin-flux

  - name: podinfo-via-flux-git
    description: Example deployment via flux (git) using the famous podinfo example
    required: true
    manifests:
      - name: podinfo
        namespace: podinfo-git
        files:
          - git/podinfo-source.yaml
          - git/podinfo-kustomization.yaml
    repos:
      - https://github.com/stefanprodan/podinfo.git
    images:
      - ghcr.io/stefanprodan/podinfo:6.4.0
    actions:
      onDeploy:
        after:
          # This will use a wait action to wait for the podinfo pod to be ready
          - description: Podinfo pods to be ready via wait action
            wait:
              cluster:
                kind: pod
                name: app=podinfo
                namespace: podinfo-git
                condition: ready

  - name: podinfo-via-flux-helm
    description: Example deployment via flux (helm oci) using the famous podinfo example
    required: true
    manifests:
      - name: podinfo
        namespace: podinfo-helm
        files:
          - helm/podinfo-source.yaml
          - helm/podinfo-helmrelease.yaml
    images:
      - ghcr.io/stefanprodan/podinfo:6.4.0
      # NOTE: Zarf only supports `oci://` urls within Flux HelmRepository definitions
      # (@AustinAbro321): This feels a bit weird to me, though it's still likely better than introducing another key. Want to discuss options internally
      - oci://ghcr.io/stefanprodan/charts/podinfo:6.4.0
    actions:
      onDeploy:
        after:
          # This will use a wait action to wait for the podinfo pod to be ready
          - description: Podinfo pods to be ready via wait action
            wait:
              cluster:
                kind: pod
                name: app.kubernetes.io/name=podinfo
                namespace: podinfo-helm
                condition: ready

  - name: podinfo-via-flux-oci
    description: Example deployment via flux (native oci) using the famous podinfo example
    required: true
    manifests:
      - name: podinfo
        namespace: podinfo-oci
        files:
          - oci/podinfo-source.yaml
          - oci/podinfo-kustomization.yaml
    images:
      - ghcr.io/stefanprodan/podinfo:6.4.0
      - oci://ghcr.io/stefanprodan/manifests/podinfo:6.4.0
    actions:
      onDeploy:
        after:
          # This will use a wait action to wait for the podinfo pod to be ready
          - description: Podinfo pods to be ready via wait action
            wait:
              cluster:
                kind: pod
                name: app=podinfo
                namespace: podinfo-oci
                condition: ready

# YAML keys starting with `x-` are custom keys that are ignored by the Zarf CLI
# The `x-mdx` key is used to render the markdown content for https://docs.zarf.dev/ref/examples
x-mdx: |
  This example demonstrates how to use flux with Zarf to deploy the `stefanprodan/podinfo` app using GitOps.

  It uses a vanilla configuration of flux with upstream containers.

  To learn more about how Zarf handles `git` repositories, see the [Git Repositories section](/ref/components/#git-repositories) of the package components documentation.
